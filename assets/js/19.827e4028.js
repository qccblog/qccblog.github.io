(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{602:function(t,n,a){"use strict";a.r(n);var i=a(17),e=Object(i.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("简单总结几种左右两侧固定，中间自适应的三栏布局方法，以备不时之需。")]),t._v(" "),a("h3",{attrs:{id:"绝对定位法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绝对定位法"}},[t._v("#")]),t._v(" 绝对定位法")]),t._v(" "),a("p",[t._v(".box1 {\nposition: relative;\n}\n.box1 .left {\nposition: absolute;\nleft: 0;\nbackground: red;\nwidth: 200px;\nheight: 100px;\n}\n.box1 .right {\nposition: absolute;\nright: 0;\nbackground: blue;\nwidth: 120px;\nheight: 200px;\n}\n.box1 .main {\nmargin: 0 120px 0 200px;\nbackground: yellow;\nheight: 140px;\n}")]),t._v(" "),a("div",{staticClass:"box1"},[a("div",{staticClass:"left"}),t._v(" "),a("div",{staticClass:"right"}),t._v(" "),a("div",{staticClass:"main"})]),t._v(" "),a("p",[t._v("这个方法主要是实现简单且易于理解，三块内容可以任意摆放。"),a("br"),t._v("\n主要问题高度不能自适应，由于采用绝对定位，所以其父元素的高度在这边主要是取决于中间部分的高度。并且中间部分实际上并不能算是自适应，假定中间部分的内容大于页面宽度减去两侧的宽度时就会发生重叠，致使不能正确显示内容。")]),t._v(" "),a("h3",{attrs:{id:"浮动布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮动布局"}},[t._v("#")]),t._v(" 浮动布局")]),t._v(" "),a("p",[t._v(".box2 {\nbackground: #eee;\n}\n.box2 .left {\nfloat: left;\nbackground: red;\nwidth: 200px;\nheight: 100px;\n}\n.box2 .right {\nfloat: right;\nbackground: blue;\nwidth: 120px;\nheight: 200px;\n}\n.box2 .main {\nmargin: 0 120px 0 200px;\nbackground: yellow;\nheight: 140px;\n}")]),t._v(" "),a("div",{staticClass:"box2"},[a("div",{staticClass:"right"}),t._v(" "),a("div",{staticClass:"left"}),t._v(" "),a("div",{staticClass:"main"}),t._v(" "),a("div",{staticStyle:{clear:"both"}})]),t._v(" "),a("p",[t._v("左右内容各自向左右浮动，并设置中间内容的margin值使中间内容宽度自适应。需要注意的是，中间内容一定要写在最后面，否则由于中间内容先把空间占满了，左右就只能浮动到下一行了。")]),t._v(" "),a("h3",{attrs:{id:"flex布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex布局"}},[t._v("#")]),t._v(" Flex布局")]),t._v(" "),a("p",[t._v(".box3 {\ndisplay: flex;\nbackground: #eee;\n}\n.box3 .left {\nbackground: red;\nwidth: 200px;\nheight: 100px;\n}\n.box3 .main {\nflex-grow: 1;  /"),a("em",[t._v("占满剩余空间")]),t._v("/\nbackground: yellow;\nheight: 140px;\n}\n.box3 .right {\nbackground: blue;\nwidth: 120px;\nheight: 200px;\n}")]),t._v(" "),a("div",{staticClass:"box3"},[a("div",{staticClass:"left"}),t._v(" "),a("div",{staticClass:"main"}),t._v(" "),a("div",{staticClass:"right"})]),t._v(" "),a("p",[t._v("使用flex布局可以极其简单的实现目的，但是在实现之前需要考虑兼容性问题，不过现代浏览器基本都已经支持该属性。")]),t._v(" "),a("h3",{attrs:{id:"圣杯布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#圣杯布局"}},[t._v("#")]),t._v(" 圣杯布局")]),t._v(" "),a("p",[t._v(".box4 {\nmargin-left: 200px;\nmargin-right: 120px;\nbackground: #eee;"),a("br"),t._v("\n}\n.box4 .main {\nfloat: left;\nwidth: 100%;\nheight: 140px;\nbackground: yellow;\n}\n.box4 .left {\nposition: relative;\nfloat: left;\nwidth: 200px;\nheight: 100px;\nmargin-left: -100%;\nleft: -200px;\nbackground: red;\n}\n.box4 .right {\nposition: relative;\nfloat: left;\nwidth: 120px;\nheight: 200px;\nmargin-left: -120px;\nright: -120px;\nbackground: blue;\n}")]),t._v(" "),a("div",{staticClass:"box4"},[a("div",{staticClass:"main"}),t._v(" "),a("div",{staticClass:"left"}),t._v(" "),a("div",{staticClass:"right"}),t._v(" "),a("div",{staticStyle:{clear:"both"}})]),t._v(" "),a("ol",[a("li",[t._v("首先是中间内容设置为100%这样中间的内容就可以自动变化，left和right紧跟其后，由于宽度不够所以漂到下一行。")]),t._v(" "),a("li",[t._v("然后我们可以设置左外边距为负100%来移到上一行的父元素的最左侧，这是因为当向左浮动的时候，只要右侧的剩下的位置大于需要的宽度就会在同一行，所以一般情况下，左外边距负值大于其总的宽度的时候，就会浮动到上一行，这样right也能以同样的方法浮动上去，这样左右内容会在中间的两边.")]),t._v(" "),a("li",[t._v("这时候就可以用相对定位把左右给定位到中间的外面，这也是其父元素要设置左右外边距的原因。")])]),t._v(" "),a("h3",{attrs:{id:"双飞翼布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双飞翼布局"}},[t._v("#")]),t._v(" 双飞翼布局")]),t._v(" "),a("p",[t._v(".box {\nbackground: #eee;\n}\n.box .left {\nfloat: left;\nbackground: red;\nwidth: 200px;\nheight: 100px;\nmargin-left: -100%;\n}\n.box .right {\nfloat: left;\nbackground: blue;\nwidth: 120px;\nmargin-left: -120px;\nheight: 80px;\n}\n.box .main {\nfloat: left;\nwidth: 100%;\nbackground: #eee;\nheight: 140px;\n}\n.box .main .content {\nbackground: yellow;\nheight: 100px;\nmargin: 0 120px 0 200px;\n}")]),t._v(" "),a("div",{staticClass:"box"},[a("div",{staticClass:"main"},[a("div",{staticClass:"content"})]),t._v(" "),a("div",{staticClass:"left"}),t._v(" "),a("div",{staticClass:"right"}),t._v(" "),a("div",{staticStyle:{clear:"both"}})]),t._v(" "),a("p",[t._v("该布局其实和圣杯布局在实现的原理上是非常相似的，只是在第3步的时候不使用相对定位把左右移到外边，而是在中间内容再设置一个div来包裹内容，给其设置外边距，这样就可以达到同样的效果。")]),t._v(" "),a("h3",{attrs:{id:"table布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#table布局"}},[t._v("#")]),t._v(" Table布局")]),t._v(" "),a("p",[t._v("由于table的性质，所以还可以使用table来实现，感兴趣的可以自己试试。")]),t._v(" "),a("p",[t._v("以上是对几种常见的三栏式布局的总结，如有更好的方法或文中不当之处，还望不吝赐教。")])])}),[],!1,null,null,null);n.default=e.exports}}]);