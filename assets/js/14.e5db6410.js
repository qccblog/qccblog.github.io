(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{597:function(t,s,n){"use strict";n.r(s);var a=n(17),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("在使用ci框架的过程，我们可能会有一些经常使用的类或者方法，比如获取当前登录的用户，如果每次都要重新写一次感觉比较麻烦而且可用性不太好。这个时候如果有一个可以全局使用的方法来获取当前用户就比较方便了。")]),t._v(" "),n("p",[t._v("在使用ci框架的时候，我们每个Controller都是继承自CI_Controller，所以可以想到，如果在CI_Controller里面添加一个方法，那么在子控制器里面肯定是可以直接使用的。但是，我们一般不会直接修改CI_Controller之类的system下面的文件，所以需要在application下面自己实现一个类似于CI_Controller的控制器。")]),t._v(" "),n("p",[t._v("在application/core/中添加一个MY_Controller方法继承自CI_Controller，在这里可以添加一些全局的方法，然后在子控制器里面就能直接引用了。")]),t._v(" "),n("p",[t._v("MY_Controller 一般结构如下：")]),t._v(" "),n("div",{staticClass:"language-php line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-php"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MY")]),t._v("\\_Controller "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name class-name-fully-qualified"}},[t._v("CI"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("_Controller")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("__construct")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$type")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n     "),n("span",{pre:!0,attrs:{class:"token keyword static-context"}},[t._v("parent")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("__construct")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("然后在子控制器继承MY_Controller，然后就能直接使用相关的方法了")])])}),[],!1,null,null,null);s.default=e.exports}}]);