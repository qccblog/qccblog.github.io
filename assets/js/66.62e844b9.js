(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{649:function(a,s,t){"use strict";t.r(s);var e=t(17),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"allure是啥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#allure是啥"}},[a._v("#")]),a._v(" Allure是啥")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://docs.qameta.io/allure/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Allure"),t("OutboundLink")],1),a._v("是一个测试报告美化插件，allure支持Java, Python, JavaScript, Ruby, Groovy, PHP, .Net, Scala等多种编程语言，例如pytest,nose，jUnit，testNG等十几种测试框架。allure提供了与Jenkins, TeamCity, Bamboo, Gradle, Maven等各种主流工具的集成。")]),a._v(" "),t("h2",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" "),t("a",{attrs:{href:"https://docs.qameta.io/allure/#_installing_a_commandline",target:"_blank",rel:"noopener noreferrer"}},[a._v("安装"),t("OutboundLink")],1)]),a._v(" "),t("p",[a._v("先下载对应版本的压缩包，"),t("a",{attrs:{href:"https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/2.8.1/allure-commandline-2.8.1.zip",target:"_blank",rel:"noopener noreferrer"}},[a._v("2.8.1"),t("OutboundLink")],1),a._v("，其他版本直接参考"),t("a",{attrs:{href:"https://github.com/allure-framework/allure2/releases",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网"),t("OutboundLink")],1),a._v(" Windows和Linux都可以解压之后把路径加到系统中就好了，官网提供的那些安装方法需要先有安装工具，一般都没有。")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 放个Linux的安装")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("wget")]),a._v(" https://dl.bintray.com/qameta/maven/io/qameta/allure/allure-commandline/2.8.1/allure-commandline-2.8.1.zip\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("unzip")]),a._v(" allure-commandline-2.8.1.zip\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("mv")]),a._v(" allure-2.8.1/ /opt/\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ln")]),a._v(" -s /opt/allure-2.8.1/bin/allure /usr/local/sbin/\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 验证一波安装成功")]),a._v("\nallure --version\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br")])]),t("h2",{attrs:{id:"生成allure的源文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成allure的源文件"}},[a._v("#")]),a._v(" 生成allure的源文件")]),a._v(" "),t("p",[a._v("allure测试报告是从不同的测试工具的测试结果中进一步加工而得来的，所以我们第一步是要生成allure源文件。这边只介绍了用到的karma和robot framework的使用，其他的参考官方文档再加上帮助应该也能搞定。")]),a._v(" "),t("h3",{attrs:{id:"nodejs的karma"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nodejs的karma"}},[a._v("#")]),a._v(" nodejs的karma")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装插件")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("npm")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" karma-allure-reporter --save-dev\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("# 配置karma"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("conf"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("js文件\nmodule"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("exports")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("config")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        # reporters中加上allure\n        "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("reporters")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'progress'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'allure'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\n        # 配置allure\n        "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("allureReport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("reportDir")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'allure'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n\n        # 引入karma"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("allure"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("reporter插件\n        "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("plugins")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"karma-mocha"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"karma-chai"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"karma-chrome-launcher"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"karma-allure-reporter"')]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br")])]),t("p",[a._v("再次执行"),t("code",[a._v("karma start")]),a._v("的时候就会生成一个allure目录，里面就是一堆有关测试信息的xml文件。这个就可以作为用于生成allure的源文件。")]),a._v(" "),t("h3",{attrs:{id:"python的robot-framework"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python的robot-framework"}},[a._v("#")]),a._v(" python的robot framework")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 安装allure-robotframework")]),a._v("\npip "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" allure-robotframework\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用就是利用robot的--listener参数")]),a._v("\nrobot --listener allure_robotframework"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("/set/your/path/here ./my_robot_test\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("这里需要注意的是，在实际使用过程中，我发现在Windows下"),t("code",[a._v(";")]),a._v("可以正常使用，但是在Ubuntu下，使用"),t("code",[a._v(";")]),a._v("一直报参数有问题的错，当时花了不少时间看，后面使用"),t("code",[a._v("robot --help")]),a._v("研究了一下才发现这边应该使用"),t("code",[a._v(":")]),a._v("。"),t("code",[a._v("/set/your/path/here")]),a._v("这个就是自定义的输出路径，这里面就是 用于生成allure的源文件。")]),a._v(" "),t("h2",{attrs:{id:"生成和查看报告"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成和查看报告"}},[a._v("#")]),a._v(" 生成和查看报告")]),a._v(" "),t("h3",{attrs:{id:"命令行使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行使用"}},[a._v("#")]),a._v(" 命令行使用")]),a._v(" "),t("p",[a._v("现在有了源文件，那么就是要看到报告了。我们先使用默认提供的命令行来查看。")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("生成allure报告")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 格式")]),a._v("\nallure generate 用于生成allure的源文件 -o 生成allure报告的目录\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#举例")]),a._v("\nallure generate result -o ./allure-report\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br")])]),t("p",[a._v("其中"),t("code",[a._v("result")]),a._v("就是python，nodejs的测试工具所生成的测试结果，里面是一堆的存储测试报告信息的文件，这个测试结果还不是能直接使用的allure报告，还需要通过allure软件来加工一下，输出allure报告。"),t("code",[a._v("./allure-report")]),a._v("就是生成的报告目录，里面就是一个静态web工程的文件。")])]),a._v(" "),t("li",[t("p",[a._v("查看报告")]),a._v(" "),t("p",[a._v("我们直接打开生成allure报告的目录会发现不能打开，其实是加载资源的问题。可以通过使用open命令打开。")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("allure "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("open")]),a._v(" 生成allure报告的目录\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("执行上述命令会直接打开浏览器，现实报告的页面。 既然是一个静态web工程，那么自然也能通过各种web服务器打开。")])]),a._v(" "),t("li",[t("p",[a._v("直接启动服务")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("allure serve 用于生成allure的源文件\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("上述命令可以直接打开一个allure报告的工程。"),t("code",[a._v("generate")]),a._v("命令适合手动调用该命令，来及时生成新的allure报告再通过服务器打开；"),t("code",[a._v("serve")]),a._v("用于直接打开一个报告，但是后续生成新的测试结果需要重新执行命令。")])])]),a._v(" "),t("h3",{attrs:{id:"jenkins集成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jenkins集成"}},[a._v("#")]),a._v(" Jenkins集成")]),a._v(" "),t("p",[a._v("如果使用Jenkins来持续集成测试的化，不需要我们通过命令行来处理，直接有可用的插件。")]),a._v(" "),t("h4",{attrs:{id:"安装-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-2"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),t("p",[a._v("先在插件管理中搜索安装"),t("a",{attrs:{href:"https://wiki.jenkins-ci.org/display/JENKINS/Allure+Plugin",target:"_blank",rel:"noopener noreferrer"}},[a._v("Allure Plugin"),t("OutboundLink")],1),a._v("，安装完成之后，需要进行一些配。打开全局工具配置，找到"),t("code",[a._v("Allure Commandline")]),a._v("，新增Allure Commandline。 Jenkins的服务器上如果已经安装allure，这边要取消自动安装的勾选，只需要配置别名和安装目录就行了，别名直接版本号就行，目录就是直接写安装目录。 如果实现没装，可以配置这边的自动安装。感觉不太稳。。。")]),a._v(" "),t("h4",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[a._v("#")]),a._v(" 配置")]),a._v(" "),t("p",[a._v("在任务的构建后操作中选择"),t("code",[a._v("Allure Report")]),a._v("，一般情况下只要填写Results的Path就可以了，这里一定要注意的是，这边的path是相对于当前工作空间的相对路径，前往不能填错了，填错了就只会出一个错误的报告页面。有需要可以选择高级里面的Report path配置输出路径。")]),a._v(" "),t("p",[a._v("配置完成运行任务就会发现我们多了一个Allure Report。点进去就能看到美化后的测试报告了。")]),a._v(" "),t("h2",{attrs:{id:"后续"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后续"}},[a._v("#")]),a._v(" 后续")]),a._v(" "),t("p",[a._v("Allure支持报告的历史记录，但是必须集成你的工作流到GIT和Jenkins中，后期有需要可以再研究研究。")])])}),[],!1,null,null,null);s.default=r.exports}}]);